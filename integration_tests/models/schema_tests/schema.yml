version: 2
models:
  - name: data_text
    columns:
      - name: email_address
        tests:
            # match email address
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "@[^.]*"
            # doesn't match number, [should store failing rows](#50fe8158b4b65c99f8593f7471f8d775)
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "%[^.]*"
              config:
                store_failures: true
                severity: warn
                warn_if: =0
            # does not match email address, should fail
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "&[^.]*"
              config:
                error_if: "=0"
                warn_if: "<4"
            # match all uppercase, but match case-insensitive
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "[A-Z]"
              flags: i
            # match all uppercase with inline case-insensitive flag and case-insensitive flag parameter (where implemented)
            # check that adapters handling flags by inlining them don't break because of the flag duplication
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "(?i)[A-Z]"
              flags: i
              config:
                enabled: "{{ target.type == 'bigquery' }}"
            # match all uppercase, case-sensitive (where implemented), should fail
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "[A-Z]"
              flags: c
              config:
                enabled: "{{ target.type in ['postgres', 'snowflake', 'redshift' ] }}"
                error_if: "=0"
                warn_if: "<4"
            # do not match other non-email string, should pass
          - dbt_expectations.expect_column_values_to_not_match_regex:
              regex: "&[^.]*"
            # match email string, [should store failing rows](#b4b9840924c5c3e876fc0ade7e089cd3)
          - dbt_expectations.expect_column_values_to_not_match_regex:
              regex: "[^.]*@"
              config:
                store_failures: true
                severity: warn
                warn_if: =0
            # match email address, should fail
          - dbt_expectations.expect_column_values_to_not_match_regex:
              regex: "@[^.]*"
              config:
                error_if: "=0"
                warn_if: "<4"
            # match all uppercase, case-sensitive (default), should pass
          - dbt_expectations.expect_column_values_to_not_match_regex:
              regex: "[A-Z]"
            # match all lowercase, case-sensitive (default), should fail
          - dbt_expectations.expect_column_values_to_not_match_regex:
              regex: "[a-z]"
              config:
                error_if: "=0"
                warn_if: "<4"
            # do match one of email address or other non-email string
          - dbt_expectations.expect_column_values_to_match_regex_list:
              regex_list: ["@[^.]*", "&[^.]*"]
            # do not match one of non-email string, [should store failing rows](#f674e5dfe4d52219da8040028b6cdb19)
          - dbt_expectations.expect_column_values_to_match_regex_list:
              regex_list: ["%[^.]*", "&[^.]*"]
              config:
                store_failures: true
                severity: warn
                warn_if: =0
            # do not match other non-email strings, should fail
          - dbt_expectations.expect_column_values_to_match_regex_list:
              regex_list: ["#[^.]*", "&[^.]*"]
              config:
                error_if: "=0"
                warn_if: "<4"
            # match all uppercase, but match case-insensitive
          - dbt_expectations.expect_column_values_to_match_regex_list:
              regex_list: ["[A-G]", "[H-Z]"]
              flags: i
            # match all uppercase, but match case-sensitive (where implemented), should fail
          - dbt_expectations.expect_column_values_to_match_regex_list:
              regex_list: ["[A-G]", "[H-Z]"]
              flags: c
              config:
                enabled: "{{ target.type in ['postgres', 'snowflake', 'redshift' ] }}"
                error_if: "=0"
                warn_if: "<4"
            # match email address or other string
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["@[^.]*", "&[^.]*"]
            # match email address or other string, [should store failing rows](#70f3f57594dd0b48f023ff721af3543d)
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["@[^.]*", "[^.]*@"]
              config:
                store_failures: true
                severity: warn
                warn_if: =0
            # match email address, should fail
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["@[^.]*", "@[^.]*"]
              config:
                error_if: "=0"
                warn_if: "<4"
            # do not match any of other non-email string
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["&[^.]*", "&[^.]*"]
              match_on: all
            # do not match any of email or other non-email string, should fail
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["@[^.]*", "&[^.]*"]
              match_on: all
              config:
                error_if: "=0"
                warn_if: "<4"
            # do not match all uppercase
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["[A-G]", "[H-Z]"]
            # do not match all uppercase or numbers, case-insensitive
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["[A-Z]", "[0-9]"]
              flags: i
            # do not match all uppercase and numbers, case-insensitive
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["[A-Z]", "[0-9]"]
              flags: i
              match_on: all
              config:
                error_if: "=0"
                warn_if: "<4"
            # match '@' anywhere in string
          - dbt_expectations.expect_column_values_to_match_like_pattern:
              like_pattern: "%@%"
            # do not match '@@' anywhere in string, [should store failing rows](#4429ac830680fbacf3f79efc3b9e563a)
          - dbt_expectations.expect_column_values_to_match_like_pattern:
              like_pattern: "%@@%"
              config:
                store_failures: true
                severity: warn
                warn_if: =0
            # match '&' anywhere in string, should fail
          - dbt_expectations.expect_column_values_to_match_like_pattern:
              like_pattern: "%&%"
              config:
                error_if: "=0"
                warn_if: "<4"
            # do not match '&' anywhere in string
          - dbt_expectations.expect_column_values_to_not_match_like_pattern:
              like_pattern: "%&%"
            # match '@' anywhere in string, [should store failing rows](#9ebeef47a6253273bb16ea1fb555f3d4)
          - dbt_expectations.expect_column_values_to_not_match_like_pattern:
              like_pattern: "%%"
              config:
                store_failures: true
                severity: warn
                warn_if: =0
            # do not match '@' anywhere in string, should fail
          - dbt_expectations.expect_column_values_to_not_match_like_pattern:
              like_pattern: "%@%"
              config:
                error_if: "=0"
                warn_if: "<4"
            # match at least one of '@' or '&' anywhere in string
          - dbt_expectations.expect_column_values_to_match_like_pattern_list:
              like_pattern_list: ["%@%", "%&%"]
            # match at least one of '#' or '&' anywhere in string, [should store failing rows](#a46176829897335ef5b484ce3e7639c6)
          - dbt_expectations.expect_column_values_to_match_like_pattern_list:
              like_pattern_list: ["%#%", "%&%"]
              config:
                store_failures: true
                severity: warn
                warn_if: =0
            # match both '@' or '&' anywhere in string, should fail
          - dbt_expectations.expect_column_values_to_match_like_pattern_list:
              like_pattern_list: ["%@%", "%&%"]
              match_on: all
              config:
                error_if: "=0"
                warn_if: "<4"
            # do not match at least one of '@' or '&' anywhere in string
          - dbt_expectations.expect_column_values_to_not_match_like_pattern_list:
              like_pattern_list: ["%@%", "%&%"]
            # do match any of '@' anywhere in string, [should store failing rows](#089145ee8260c6403493de6d16d18f6d)
          - dbt_expectations.expect_column_values_to_not_match_like_pattern_list:
              like_pattern_list: ["%@%", "%@%"]
              config:
                store_failures: true
                severity: warn
                warn_if: =0
            # do not match either of '@' or '&' anywhere in string, should fail
          - dbt_expectations.expect_column_values_to_not_match_like_pattern_list:
              like_pattern_list: ["%@%", "%&%"]
              match_on: all
              config:
                error_if: "=0"
                warn_if: "<4"
      - name: postal_code_5
        tests:
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "^\\d{5}"
              is_raw: True
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "^\\d{55}"
              is_raw: True
              config:
                error_if: "=0"
                warn_if: "<4"
          - dbt_expectations.expect_column_values_to_not_match_regex:
              regex: "@[^.]*"
              is_raw: True
          - dbt_expectations.expect_column_values_to_not_match_regex:
              regex: "^\\d{5}"
              is_raw: True
              config:
                error_if: "=0"
                warn_if: "<4"
          - dbt_expectations.expect_column_values_to_match_regex_list:
              regex_list: ["^\\d{5}"]
              is_raw: True
          - dbt_expectations.expect_column_values_to_match_regex_list:
              regex_list: ["^\\d{5}", "@[^.]*"]
              is_raw: True
          - dbt_expectations.expect_column_values_to_match_regex_list:
              regex_list: ["^\\d{5}", "@[^.]*"]
              is_raw: True
              match_on: all
              config:
                error_if: "=0"
                warn_if: "<4"
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["@[^.]*"]
              is_raw: True
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["^\\d{5}", "@[^.]*"]
              is_raw: True
          - dbt_expectations.expect_column_values_to_not_match_regex_list:
              regex_list: ["^\\d{5}", "@[^.]*"]
              is_raw: True
              match_on: all
              config:
                error_if: "=0"
                warn_if: "<4"
      - name: postal_code_5_3
        tests:
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "^\\d{5}-\\d{3}"
              is_raw: True
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: "^\\d{5}-\\d{9}"
              is_raw: True
              config:
                error_if: "=0"
                warn_if: "<4"  
  
  - name: timeseries_data
    tests:
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list: ["date_day", "date_datetime", "date_timestamp", "row_value", "row_value_log"]
        # expect column order to be incorrect, [should store failing rows](#3bd6bcfa1e483bf563d0c6b6ff125548)
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list: ["date_timestamp", "row_value", "date_day", "date_datetime", "row_value_log"]
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
          column_name: date_day
          compare_model: ref("timeseries_data_extended")
          compare_column_name: date_day
        # expect distinct count to be different, [should store failing rows](#6029c8216b74899244b808c16a83c95e)
      - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
          column_name: date_day
          compare_model: ref("timeseries_data_extended")
          compare_column_name: row_value
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:
          date_col: date_day
          date_part: day
        # expect row values to not have data for every year, [should store failing rows](#c156bf23e00131cf1e530433ab681fef)
      - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:
          date_col: date_day
          date_part: year
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:
          date_col: date_day
          date_part: day
          exclusion_condition: not(date_day = '2021-10-19')
      - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:
          date_col: date_day
          date_part: day
          test_start_date: '{{ modules.datetime.date.today() - modules.datetime.timedelta(365) }}'
          test_end_date: '{{ modules.datetime.date.today() - modules.datetime.timedelta(2) }}'


    columns:
      - name: date_day
        tests:
          - dbt_expectations.expect_row_values_to_have_recent_data:
              datepart: day
              interval: 1
              # expect row values to have dated data, [should store failing rows](#252ae16f60f705db85ba7e3cdf93dd8c) 
          - dbt_expectations.expect_row_values_to_have_recent_data:
              datepart: year
              interval: 0
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [date, "{{ dbt_expectations.type_timestamp() }}"]
            # expect column values to not be in list, [should store failing rows](#aa2f35c87625a42aa8f95fde5849e2f6) 
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [varchar, "{{ dbt_expectations.type_timestamp() }}"]
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_be_increasing:
              sort_column: date_day
            # expect column values to not be increasing, [should store failing rows](#67235c57a1e55a762011593efba42b12) 
          - dbt_expectations.expect_column_values_to_be_increasing:
              sort_column: row_value
              config:
                 store_failures: true
                 severity: warn
                 warn_if: =0
          - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
              compare_model: ref("timeseries_data_extended")

      - name: date_datetime
        tests:
          - dbt_expectations.expect_row_values_to_have_recent_data:
              datepart: day
              interval: 1
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [date, "{{ dbt_expectations.type_datetime() }}"]

      - name: date_timestamp
        tests:
          - dbt_expectations.expect_row_values_to_have_recent_data:
              datepart: day
              interval: 1
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [date, "{{ dbt_expectations.type_timestamp() }}"]

      - name: row_value
        tests:
          - dbt_expectations.expect_column_values_to_be_within_n_stdevs:
              sigma_threshold: 6
          - dbt_expectations.expect_column_values_to_be_within_n_stdevs:
              group_by: ["date_day"]
              sigma_threshold: 6
            # expect column values to be outside the stdev, [should store failing rows](#50ff354a7d05e4ab267e187b30a31282) 
          - dbt_expectations.expect_column_values_to_be_within_n_stdevs:
              group_by: ["date_day"]
              sigma_threshold: 1
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_be_within_n_moving_stdevs:
              date_column_name: date_day
              sigma_threshold: 6
              take_logs: true
              severity: warn
            # expect column values to be outside the moving stdev, [should store failing rows](#358fc6ef8e5314e8f961d04fb0e0d443) 
          - dbt_expectations.expect_column_values_to_be_within_n_moving_stdevs:
              date_column_name: date_day
              sigma_threshold: 1
              take_logs: true
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_be_within_n_moving_stdevs:
              date_column_name: date_day
              sigma_threshold: 6
              take_diffs: false
              take_logs: true
              severity: warn

  - name: timeseries_data_extended
    tests:
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list: ["date_day", "row_value", "row_value_log"]
      - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:
          date_col: date_day
          date_part: day
      - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:
          date_col: date_day
          date_part: day
          interval: 7
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: count(distinct date_day)
          compare_expression: count(*)
          compare_model: ref("timeseries_data")
        # expect table aggregation to differ, [should store failing rows](#a2801f8e4aa53181f19a858008276d76) 
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: count(distinct row_value)
          compare_expression: count(*)
          compare_model: ref("timeseries_data")
          config:
                store_failures: true
                severity: warn
                warn_if: =0

    columns:
      - name: date_day
        tests:
          - dbt_expectations.expect_row_values_to_have_recent_data:
              datepart: day
              interval: 1

          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: "{{ dbt_expectations.type_datetime() }}"
            # expect column types to be incorrect, [should store failing rows](#6a0ca8675c186627894f397e6af82160) 
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: "varchar"
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [date, "{{ dbt_expectations.type_datetime() }}"]

      - name: row_value
        tests:
          - dbt_expectations.expect_column_distinct_count_to_equal:
              row_condition: date_day = {{ dbt_date.yesterday() }}
              value: 10
          - dbt_expectations.expect_column_distinct_count_to_be_greater_than:
              row_condition: date_day = {{ dbt_date.yesterday() }}
              value: 1
            # expect column distinct count to not be greater than, [should store failing rows](#96846a820a22f54463c2b71ef9cb339a) 
          - dbt_expectations.expect_column_distinct_count_to_be_greater_than:
              row_condition: date_day = {{ dbt_date.yesterday() }}
              value: 11
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_distinct_count_to_be_less_than:
              value: 11
              row_condition: date_day = {{ dbt_date.yesterday() }}
            # expect column distinct count to not be less than, [should store failing rows](#bca42b761f1bfba2a0464d6c2c382400) 
          - dbt_expectations.expect_column_distinct_count_to_be_less_than:
              value: 1
              row_condition: date_day = {{ dbt_date.yesterday() }}
              config:
                store_failures: true
                severity: warn
                warn_if: =0



      - name: row_value_log
        tests:
          - dbt_expectations.expect_column_values_to_be_within_n_moving_stdevs:
              date_column_name: cast(date_day as {{ dbt_expectations.type_datetime() }})
              sigma_threshold: 6
              take_logs: false
              severity: warn

  - name: timeseries_hourly_data_extended
    tests:
      - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:
          date_col: date_hour
          date_part: hour

    columns:
      - name: date_hour
        tests:
          - dbt_expectations.expect_row_values_to_have_recent_data:
              datepart: hour
              interval: 24
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: "{{ dbt_expectations.type_datetime() }}"
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: ["{{ dbt_expectations.type_datetime() }}"]


      - name: row_value_log
        tests:
          - dbt_expectations.expect_column_values_to_be_within_n_moving_stdevs:
              date_column_name: cast(date_hour as {{ dbt_expectations.type_datetime() }})
              period: hour
              trend_periods: 48
              test_periods: 12
              sigma_threshold: 6
              take_logs: false
              severity: warn


  - name: data_test
    tests:
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["date_col", "col_string_b"]
        # expect compound columns to be non-unique, [should store failing rows](#28570c72b44e2dcf4eedbd31dcef5f0c) 
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["col_numeric_a", "col_numeric_b"]
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["date_col", "col_string_b"]
          row_condition: 2=2
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["date_col", "col_string_b"]
          ignore_row_if: "any_value_is_missing"
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["date_col", "col_string_b"]
          ignore_row_if: "all_values_are_missing"
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["date_col", "col_null"]
          ignore_row_if: "any_value_is_missing"
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["date_col", "col_null"]
          ignore_row_if: "all_values_are_missing"
          config:
            # this should fail, so we flip the fail condition
            fail_calc: 'cast((count(*)=0) as int)'
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["col_null", "col_null_2"]
          ignore_row_if: "all_values_are_missing"
      - dbt_expectations.expect_table_row_count_to_equal:
          value: 4
        # expect row count to not be equal, [should store failing rows](#row_count_to_equal_data_test__4) 
      - dbt_expectations.expect_table_row_count_to_equal:
          value: -4
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_row_count_to_be_between:
          min_value: 1
          max_value: 4
        # expect row count to not be between, [should store failing rows](#6a676b6265533cbfb045f2e0c76d7fb4) 
      - dbt_expectations.expect_table_row_count_to_be_between:
          min_value: -8
          max_value: -4
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_row_count_to_be_between:
          min_value: 1
      - dbt_expectations.expect_table_row_count_to_be_between:
          max_value: 4
      - dbt_expectations.expect_table_row_count_to_equal_other_table:
          compare_model: ref("data_test")
          row_condition: 1=1
          compare_row_condition: 1=1
        # expect row counts to not be equals, [should store failing rows](#830445dfcdfe97274bbaaebe666a49f9) 
      - dbt_expectations.expect_table_row_count_to_equal_other_table:
          compare_model: ref("data_test")
          row_condition: 1=1
          compare_row_condition: 2=1
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_column_count_to_equal:
          value: 8
        # expect column count to not be equal, [should store failing rows](#5d8af86142e455acf893fdb79954e8d5) 
      - dbt_expectations.expect_table_column_count_to_equal:
          value: -8
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_column_count_to_be_between:
          min_value: 1
          max_value: 10
        # expect column count to not be between, [should store failing rows](#7b683c0fd621761bf32ea9c77a1207cd) 
      - dbt_expectations.expect_table_column_count_to_be_between:
          min_value: -10
          max_value: -1
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_column_count_to_be_between:
          min_value: 1
      - dbt_expectations.expect_table_column_count_to_be_between:
          max_value: 10
      - dbt_expectations.expect_table_columns_to_contain_set:
          column_list: ["col_numeric_b", "col_string_a"]
        # expect table columns to not contain set, [should store failing rows](#3342f886eb20425d4023c50b6c264cc5) 
      - dbt_expectations.expect_table_columns_to_contain_set:
          column_list: ["col_not_in_table_a", "col_not_in_table_b"]
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_columns_to_match_set:
          column_list: ["idx", "date_col", "col_numeric_a", "col_numeric_b", "col_string_a", "col_string_b", "col_null", "col_null_2"]
        # expect table columns to not match set, [should store failing rows](#a58aba93ddbbbe366e3944db925de93b) 
      - dbt_expectations.expect_table_columns_to_match_set:
          column_list: ["col_not_in_table_a", "col_not_in_table_b"]
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list: ["idx", "date_col", "col_numeric_a", "col_numeric_b", "col_string_a", "col_string_b", "col_null", "col_null_2"]
        # expect table columns to not match ordered list, [should store failing rows](#16229538390f70e3c4e0ef33f51f7126) 
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list: ["date_col", "col_numeric_a", "col_numeric_b", "col_string_a", "col_string_b", "col_null", "col_null_2", "idx"]
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_column_count_to_equal_other_table:
          compare_model: ref("data_test")
        # expect table column count to not match other table, [should store failing rows](#c0a3de97b1f744c65e3d2e715bed42d7) 
      - dbt_expectations.expect_table_column_count_to_equal_other_table:
          compare_model: ref("timeseries_data")
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_columns_to_not_contain_set:
          column_list: ["col_numeric_c", "col_string_d"]
        # expect table columns to not contain set, [should store failing rows](#5fc27ea873e18b1e9ddc0a7aa6dbcd77) 
      - dbt_expectations.expect_table_columns_to_not_contain_set:
          column_list: ["col_numeric_a", "col_string_b"]
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expression_is_true:
          expression: (col_numeric_a + col_numeric_b = 1)
        # expect expression to be false, [should store failing rows](#2b3df2f34bfbadac00cbf5c1d2fc43b9) 
      - dbt_expectations.expression_is_true:
          expression: (col_numeric_a + col_numeric_b <> 1)
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.equal_expression:
          expression: sum(col_numeric_a)
          compare_model: ref("data_test")
          group_by: [idx]
        # expect expression to not be equal, [should store failing rows](#eac1c69bfe238e77061867aa8fe4bc02) 
      - dbt_expectations.equal_expression:
          expression: sum(col_numeric_a)
          compare_model: ref("data_test")
          compare_expression: 5
          group_by: [idx]
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.equal_expression:
          expression: sum(col_numeric_a)
          compare_expression: sum(col_numeric_a * .5)
          compare_model: ref("data_test")
          group_by: [idx]
          tolerance_percent: .5
      - dbt_expectations.expect_table_aggregation_to_equal_other_table:
          expression: sum(col_numeric_a)
          compare_expression: sum(col_numeric_a * .99)
          compare_model: ref("data_test")
          group_by: [idx]
          tolerance_percent: .95
      - dbt_expectations.expect_column_pair_values_to_be_in_set:
          column_A: col_numeric_a
          column_B: col_numeric_b
          value_pairs_set: [[0, 1], [1, 0], [0.5, 0.5], [0.5, 0.5]]
        # expect column pair values to not be in set, [should store failing rows](#31eeee5db90e215e53b91d7802a0ea4a) 
      - dbt_expectations.expect_column_pair_values_to_be_in_set:
          column_A: col_numeric_a
          column_B: col_numeric_b
          value_pairs_set: [[5, 5], [10, 10], [-0.5, -0.5], [-0.5, -0.5]]
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.equal_expression:
          expression: sum(col_numeric_a)
          compare_model: ref("data_test")
          compare_expression: sum(col_numeric_b)
      - dbt_expectations.expect_column_pair_values_A_to_be_greater_than_B:
          column_A: col_numeric_a+10
          column_B: col_numeric_a
        # expect column pair values A to not be greater than B, [should store failing rows](#59560feb2fa77921ad441cae8ab09d72) 
      - dbt_expectations.expect_column_pair_values_A_to_be_greater_than_B:
          column_A: col_numeric_a-10
          column_B: col_numeric_a
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_column_pair_values_A_to_be_greater_than_B:
          column_A: col_numeric_a
          column_B: col_numeric_a
          or_equal: True
        # expect column pair values to not be equal, [should store failing rows](#fbceee675139638784e5eac9adc73339) 
      - dbt_expectations.expect_column_pair_values_to_be_equal:
          column_A: col_numeric_a
          column_B: col_numeric_b
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_select_column_values_to_be_unique_within_record:
          column_list: ["col_string_a", "col_string_b"]
          ignore_row_if: "any_value_is_missing"
        # expect column values to not be unique within record, [should store failing rows](#7ef8e1ed87e706f35aa7290c74f52dc0) 
      - dbt_expectations.expect_select_column_values_to_be_unique_within_record:
          column_list: ["col_numeric_a", "col_numeric_b"]
          ignore_row_if: "any_value_is_missing"
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_multicolumn_sum_to_equal:
          column_list: ["col_numeric_a", "col_numeric_b"]
          sum_total: 4
        # expect multicolumn sum to not be equal, [should store failing rows](#fd100321a81851ad272526f368d35013) 
      - dbt_expectations.expect_multicolumn_sum_to_equal:
          column_list: ["col_numeric_a", "col_numeric_b"]
          sum_total: 2
          config:
                store_failures: true
                severity: warn
                warn_if: =0

    columns:
      - name: idx
        tests:
          - dbt_expectations.expect_column_to_exist:
              column_index: 1
            # expect column to not exist, [should store failing rows](#to_exist_data_test_3__idx) 
          - dbt_expectations.expect_column_to_exist:
              column_index: 3
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_be_unique
          - dbt_expectations.expect_column_values_to_be_increasing:
              sort_column: idx

      - name: col_numeric_a
        tests:
            # expect column to not be unique, [should store failing rows](#683340919b30c10769325ec1dc2f5443) 
          - dbt_expectations.expect_column_values_to_be_unique:
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_to_exist
          - dbt_expectations.expect_column_to_exist:
              column_index: 3
          - dbt_expectations.expect_column_values_to_not_be_null
            # expect column to not be null, [should store failing rows](#da3f47cfcf69ebfd61e7a593b71bddde) 
          - dbt_expectations.expect_column_values_to_be_null:
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 1
            # expect column to not be between, [should store failing rows](#96cb223a4fc2ab2eb9cce2d35de11cee) 
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -10
              max_value: -1
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
          - dbt_expectations.expect_column_sum_to_be_between:
              min_value: 1
              max_value: 3
            # expect column sum to not be between, [should store failing rows](#3724830b8755038cce647e3fd0ea99f0) 
          - dbt_expectations.expect_column_sum_to_be_between:
              min_value: -3
              max_value: -1
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_min_to_be_between:
              min_value: 0
              max_value: 0
            # expect column min to not be between, [should store failing rows](#9aac4a0c8037304da4bde87f262c359a) 
          - dbt_expectations.expect_column_min_to_be_between:
              min_value: 10
              max_value: 10
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_max_to_be_between:
              min_value: 1
              max_value: 1
            # expect column max to not be between, [should store failing rows](#ccbfbecef990c630900ebd228864e259) 
          - dbt_expectations.expect_column_max_to_be_between:
              min_value: 0
              max_value: 0
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_mean_to_be_between:
              min_value: 0
              max_value: 1.5
            # expect column mean to not be between, [should store failing rows](#c44393b3bfa1d3815a69c25700611d84) 
          - dbt_expectations.expect_column_mean_to_be_between:
              min_value: -1
              max_value: -0.5
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_unique_value_count_to_be_between:
              min_value: 3
              max_value: 3
            # expect column unique value count to not be between, [should store failing rows](#6bbef2085898475d0b834e75ee32a119) 
          - dbt_expectations.expect_column_unique_value_count_to_be_between:
              min_value: 1
              max_value: 1
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_proportion_of_unique_values_to_be_between:
              min_value: 0
              max_value: .75
            # expect column proportion of unique values to not be between, [should store failing rows](#658e7ed17f0276211f084b4a11a19220) 
          - dbt_expectations.expect_column_proportion_of_unique_values_to_be_between:
              min_value: -1
              max_value: -.75
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_stdev_to_be_between:
              min_value: 0
              max_value: 2
            # expect column stdev to not be between, [should store failing rows](#4d2013b3a6baaffcb69986864aa5b6e4) 
          - dbt_expectations.expect_column_stdev_to_be_between:
              min_value: -10
              max_value: -2
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_stdev_to_be_between:
              min_value: 0
              strictly: true
          - dbt_expectations.expect_column_most_common_value_to_be_in_set:
              value_set: [0.5]
              top_n: 1
              quote_values: false
            # expect column most common value to not be in set, [should store failing rows](#65993ad5cd85d2b007d862fd9c2ac8f5) 
          - dbt_expectations.expect_column_most_common_value_to_be_in_set:
              value_set: [0.0]
              top_n: 1
              quote_values: false
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_be_increasing:
              sort_column: col_numeric_a
              strictly: false


      - name: col_string_a
        tests:
          - dbt_expectations.expect_column_values_to_be_in_set:
              value_set: ['a', 'b', 'c']
              quote_values: true
            # expect column values to not be in set, [should store failing rows](#14f59b141efceb67d36cefd63fb4bd37) 
          - dbt_expectations.expect_column_values_to_be_in_set:
              value_set: ['2','3']
              quote_values: true
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_not_be_in_set:
              value_set: ['2','3']
              quote_values: true
            # expect column values to be in set, [should store failing rows](#50848af8004898557c3b0ab39c9f96e7) 
          - dbt_expectations.expect_column_values_to_not_be_in_set:
              value_set: ['a', 'b', 'c']
              quote_values: true
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_distinct_values_to_equal_set:
              value_set: ['a','b','c','c']
          - dbt_expectations.expect_column_distinct_values_to_equal_set:
              value_set: ['a','b','c']
            # expect column distinct values to not equal set, [should store failing rows](#c01780bae9e50480f7d344195bc45ba4) 
          - dbt_expectations.expect_column_distinct_values_to_equal_set:
              value_set: ['d','d']
              config:
                store_failures: true
                severity: warn
                warn_if: =0
            # expect column distinct values to not equal set, [should store failing rows](#6c5efd1d56ef04f10eb3aa61ba72ea62) 
          - dbt_expectations.expect_column_distinct_values_to_equal_set:
              value_set: ['a','c']
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_distinct_values_to_be_in_set:
              value_set: ['a','b','c','d']
              quote_values: true
            # expect column distinct values to not be in set, [should store failing rows](#b0985e035744485abd9b9352d9a9f1c5) 
          - dbt_expectations.expect_column_distinct_values_to_be_in_set:
              value_set: ['d','e']
              quote_values: true
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_distinct_values_to_contain_set:
              value_set: ['a','b']
            # expect column distinct values to not contain set, [should store failing rows](#217ad937606b61f2d304371afdcd55f9) 
          - dbt_expectations.expect_column_distinct_values_to_contain_set:
              value_set: ['d','e']
              tags: [failing_test]
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_value_lengths_to_equal:
              value: 1
            # expect column value length to not equal, [should store failing rows](#0b59a422d382479dd5ad936a46a8fcb2) 
          - dbt_expectations.expect_column_value_lengths_to_equal:
              value: 0
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_values_to_have_consistent_casing
          - dbt_expectations.expect_column_values_to_have_consistent_casing:
              display_inconsistent_columns: true
          - dbt_expectations.expect_column_distinct_count_to_be_less_than:
              value: 4

      - name: col_string_b
        tests:
          - dbt_expectations.expect_column_values_to_not_be_in_set:
              value_set: ['a','c']
              quote_values: true
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              min_value: 1
              max_value: 4
            # expect column value lengths to not be between, [should store failing rows](#06cc6a8f1b954e82b6a9583c93d0907b) 
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              min_value: -10
              max_value: -4
              config:
                store_failures: true
                severity: warn
                warn_if: =0
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              min_value: 1
          - dbt_expectations.expect_column_value_lengths_to_be_between:
              max_value: 4

      - name: col_null
        tests:
          - dbt_expectations.expect_column_values_to_be_null
            # expect column to be null, [should store failing rows](#8f4d07f8f9e2d1910d6437cd0fe13d13) 
          - dbt_expectations.expect_column_values_to_not_be_null:
               config:
                store_failures: true
                severity: warn
                warn_if: =0

  - name : data_test_factored
    tests :
      - dbt_expectations.expect_table_row_count_to_equal_other_table_times_factor:
          compare_model: ref("data_test")
          factor: 2
        # expect column to not be factor 1, [should store failing rows](#10c6fb9b520d55aeccfe157038c088cb) 
      - dbt_expectations.expect_table_row_count_to_equal_other_table_times_factor:
          compare_model: ref("data_test")
          factor: 1
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_table_row_count_to_equal_other_table_times_factor:
          compare_model: ref("data_test")
          group_by: [date_col]
          factor: 2
      - dbt_expectations.expect_table_row_count_to_equal_other_table_times_factor:
          compare_model: ref("data_test")
          group_by: [date_col, idx]
          factor: 2

  - name : timeseries_data_grouped
    tests :
      - dbt_expectations.expect_table_row_count_to_be_between:
          min_value: 10
      - dbt_expectations.expect_table_row_count_to_be_between:
          min_value: 10
          group_by: [date_day]
      - dbt_expectations.expect_table_row_count_to_be_between:
          max_value: 10000
          group_by: [group_id]
          strictly: True
      - dbt_expectations.expect_grouped_row_values_to_have_recent_data:
          group_by: [group_id]
          timestamp_column: date_timestamp
          datepart: day
          interval: 1
        # expect column to not have recent data with negative interval, [should store failing rows](#5cd0609947ef37a954a97ba4b0f9a696) 
      - dbt_expectations.expect_grouped_row_values_to_have_recent_data:
          group_by: [group_id]
          timestamp_column: date_timestamp
          datepart: day
          interval: -1
          config:
                store_failures: true
                severity: warn
                warn_if: =0
      - dbt_expectations.expect_grouped_row_values_to_have_recent_data:
          group_by: [group_id]
          timestamp_column: date_timestamp
          datepart: day
          interval: 1
          row_condition: group_id = 4
      - dbt_expectations.expect_grouped_row_values_to_have_recent_data:
          timestamp_column: date_timestamp
          datepart: day
          interval: 1
      - dbt_expectations.expect_grouped_row_values_to_have_recent_data:
          group_by: [date_day]
          timestamp_column: date_timestamp
          datepart: day
          interval: 1
          config:
              # this should fail, so we flip the fail condition
            fail_calc: 'cast((count(*)=0) as int)'

    columns:
      - name: row_value
        tests:
          - dbt_expectations.expect_column_values_to_be_within_n_moving_stdevs:
              date_column_name: date_day
              group_by: [group_id]
              sigma_threshold: 6
              take_logs: true
              severity: warn
          - dbt_expectations.expect_column_values_to_be_within_n_stdevs:
              group_by: [group_id]
              sigma_threshold: 6
          - dbt_expectations.expect_column_values_to_be_within_n_stdevs:
              sigma_threshold: 6
          - dbt_expectations.expect_column_values_to_be_within_n_stdevs:
              group_by: [group_id]
              sigma_threshold: 1
              config:
                  # this should fail, so we flip the fail condition
                  fail_calc: 'cast((count(*)=0) as int)'


  - name: window_function_test
    columns:
      - name: rolling_sum_increasing
        tests :
          - dbt_expectations.expect_column_values_to_be_increasing:
              group_by: ['idx']
              strictly: true
              sort_column: date_col
            # expect column values to not be decreasing, [should store failing rows](#3c87a2adb0955d0e55f2d18e9536f40b) 
          - dbt_expectations.expect_column_values_to_be_decreasing:
              group_by: ['idx']
              strictly: true
              sort_column: date_col
              config:
                store_failures: true
                severity: warn
                warn_if: =0
      - name: rolling_sum_decreasing
        tests :
          - dbt_expectations.expect_column_values_to_be_decreasing:
              group_by: ['idx']
              strictly: true
              sort_column: date_col
